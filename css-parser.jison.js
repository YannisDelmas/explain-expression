/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var cssParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,19],$V2=[1,20],$V3=[1,17],$V4=[1,18],$V5=[1,21],$V6=[1,22],$V7=[1,23],$V8=[1,26],$V9=[5,8,50],$Va=[1,28],$Vb=[1,31],$Vc=[1,32],$Vd=[1,33],$Ve=[5,8,9,44,45,46,50],$Vf=[5,8,9,11,44,45,46,50],$Vg=[5,8,9,11,28,29,32,44,45,46,49,50,51],$Vh=[1,40],$Vi=[5,8,9,11,28,29,32,34,35,37,38,39,40,41,42,44,45,46,49,50,51],$Vj=[5,8,9,11,20,28,29,32,34,35,37,38,39,40,41,42,44,45,46,49,50,51,52,53,54],$Vk=[1,48],$Vl=[21,28,29,30,31,32,49,51],$Vm=[21,30,31],$Vn=[34,35,37,38,39,40,41,42],$Vo=[1,83],$Vp=[1,86],$Vq=[1,87],$Vr=[9,34],$Vs=[31,50],$Vt=[46,50,58];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"expressions":3,"selectors_group":4,"EOF":5,"comma":6,"selector":7,",":8,"S":9,"combinator_selector":10,"DOUBLE_COLON":11,"ident":12,"simple_selector":13,"element":14,"constraint_list":15,"padded_child_combinator":16,"padded_tilde":17,"padded_plus":18,"namespace_prefix":19,"|":20,"*":21,"namespace_prefix_ident":22,"constraint":23,"class":24,"hash":25,"attrib":26,"pseudo":27,".":28,"#":29,"IDENT":30,"n":31,"[":32,"padded_namespace_prefix_ident":33,"]":34,"=":35,"padded_ident_or_string":36,"SUBSTRINGMATCH":37,"DOES_NOT_CONTAIN":38,"INCLUDES":39,"DASHMATCH":40,"PREFIXMATCH":41,"SUFFIXMATCH":42,"string":43,">":44,"~":45,"+":46,"SINGLE_QUOTED_STRING":47,"DOUBLE_QUOTED_STRING":48,"NOT":49,")":50,":":51,"ODD_ARGUMENT":52,"EVEN_ARGUMENT":53,"(":54,"an_plus_b":55,"integer":56,"INTEGER":57,"-":58,"integer_n":59,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:",",9:"S",11:"DOUBLE_COLON",20:"|",21:"*",28:".",29:"#",30:"IDENT",31:"n",32:"[",34:"]",35:"=",37:"SUBSTRINGMATCH",38:"DOES_NOT_CONTAIN",39:"INCLUDES",40:"DASHMATCH",41:"PREFIXMATCH",42:"SUFFIXMATCH",44:">",45:"~",46:"+",47:"SINGLE_QUOTED_STRING",48:"DOUBLE_QUOTED_STRING",49:"NOT",50:")",51:":",52:"ODD_ARGUMENT",53:"EVEN_ARGUMENT",54:"(",57:"INTEGER",58:"-"},
productions_: [0,[3,2],[4,3],[4,1],[6,1],[6,2],[7,3],[7,3],[7,1],[7,1],[13,2],[13,1],[13,1],[10,3],[10,3],[10,3],[10,3],[19,2],[19,2],[22,2],[22,1],[14,1],[14,2],[14,1],[15,2],[15,1],[23,1],[23,1],[23,1],[23,1],[24,2],[25,2],[12,1],[12,1],[26,3],[26,5],[26,5],[26,5],[26,5],[26,5],[26,5],[26,5],[33,3],[33,2],[33,2],[33,1],[36,3],[36,2],[36,2],[36,1],[36,3],[36,2],[36,2],[36,1],[16,3],[16,2],[16,2],[16,1],[17,3],[17,2],[17,2],[17,1],[18,3],[18,2],[18,2],[18,1],[43,1],[43,1],[27,3],[27,3],[27,3],[27,5],[27,5],[27,4],[27,2],[56,1],[56,2],[56,2],[59,1],[59,2],[59,2],[59,2],[55,3],[55,3],[55,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1];
break;
case 2:
 $$[$0-2].selectors.push($$[$0]); $$[$0-2].type = 'selectors_group'; this.$ = $$[$0-2] 
break;
case 3:
 this.$ = yy.create({ type: 'simple_selector_sequence', selectors: [$$[$0]] }) 
break;
case 6: case 7:
 this.$ = yy.create({ type: 'pseudo_element', name: $$[$0], subject: $$[$0-2] }) 
break;
case 10:
 $$[$0-1].constraints = $$[$0].constraints; this.$ = $$[$0-1] 
break;
case 12:
 this.$ = yy.create({ type: 'constraint_list', constraints: $$[$0].constraints }) 
break;
case 13:
 this.$ = yy.create({ type: 'combinator_selector', left: $$[$0-2], right: $$[$0], combinator: 'child' }) 
break;
case 14:
 this.$ = yy.create({ type: 'combinator_selector', left: $$[$0-2], right: $$[$0], combinator: 'descendant' }) 
break;
case 15:
 this.$ = yy.create({ type: 'subsequent_sibling', left: $$[$0-2], right: $$[$0] }) 
break;
case 16:
 this.$ = yy.create({ type: 'next_sibling', left: $$[$0-2], right: $$[$0] }) 
break;
case 17: case 18:
 this.$ = $$[$0-1]+ ':'; 
break;
case 19:
 this.$ = $$[$0-1]+ $$[$0]; 
break;
case 21:
 this.$ = yy.create({ type: 'element', name: $$[$0], constraints: [] }) 
break;
case 22:
 this.$ = yy.create({ type: 'universal', name: $$[$0], namespace: $$[$0-1], constraints: [] }) 
break;
case 23:
 this.$ = yy.create({ type: 'universal', name: $$[$0], constraints: [] }) 
break;
case 24:
 $$[$0-1].constraints.push($$[$0]); this.$ = $$[$0-1] 
break;
case 25:
 this.$ = yy.create({ type: 'constraint_list', constraints: [$$[$0]] }) 
break;
case 30:
 this.$ = { type: 'class', name: $$[$0] } 
break;
case 31:
 this.$ = { type: 'id', name: $$[$0] } 
break;
case 34:
 this.$ = yy.create({ type: 'has_attribute', name: $$[$0-1] }) 
break;
case 35:
 this.$ = yy.create({ type: 'attribute_equals', name: $$[$0-3], value: $$[$0-1] }) 
break;
case 36:
 this.$ = yy.create({ type: 'attribute_contains', name: $$[$0-3], value: $$[$0-1] }) 
break;
case 37:
 this.$ = yy.create({ type: 'attribute_does_not_contain', name: $$[$0-3], value: $$[$0-1] }) 
break;
case 38:
 this.$ = yy.create({ type: 'attribute_contains_word', name: $$[$0-3], value: $$[$0-1] }) 
break;
case 39:
 this.$ = yy.create({ type: 'attribute_contains_prefix', name: $$[$0-3], value: $$[$0-1] }) 
break;
case 40:
 this.$ = yy.create({ type: 'attribute_starts_with', name: $$[$0-3], value: $$[$0-1] }) 
break;
case 41:
 this.$ = yy.create({ type: 'attribute_ends_with', name: $$[$0-3], value: $$[$0-1] }) 
break;
case 42: case 44: case 46: case 48: case 52:
 this.$ = $$[$0-1] 
break;
case 43: case 45: case 47: case 49: case 51: case 53:
 this.$ = $$[$0] 
break;
case 50:
 this.$ = $$[$0-2] 
break;
case 66: case 67:
 this.$ = $$[$0].substr(1, $$[$0].length - 2) 
break;
case 68:
 this.$ = { type: 'negation', args: $$[$0-1] } 
break;
case 69:
 this.$ = { type: 'pseudo_func', name: $$[$0-1], args: { type: 'odd' } } 
break;
case 70:
 this.$ = { type: 'pseudo_func', name: $$[$0-1], args: { type: 'even' } } 
break;
case 71: case 72:
 this.$ = { type: 'pseudo_func', name: $$[$0-3], args: $$[$0-1] } 
break;
case 73:
 this.$ = { type: 'pseudo_func', name: $$[$0-2] } 
break;
case 74:
 this.$ = yy.create({ type: ['first-line','first-letter','before','after'].includes($$[$0])?'pseudo_element_old':'pseudo_class', name: $$[$0] }) 
break;
case 75: case 76:
 this.$ = Number($$[$0]); 
break;
case 77:
 this.$ = - Number($$[$0]); 
break;
case 78: case 79:
 this.$ = 1; 
break;
case 80:
 this.$ = -1; 
break;
case 81:
 this.$ = $$[$0-1]; 
break;
case 82:
 this.$ = { type: 'an_plus_b', a: $$[$0-2], b: Number($$[$0]) } 
break;
case 83:
 this.$ = { type: 'an_plus_b', a: $$[$0-2], b: -Number($$[$0]) } 
break;
case 84:
 this.$ = { type: 'an_plus_b', a: $$[$0], b: 0 } 
break;
}
},
table: [{3:1,4:2,7:3,10:4,12:12,13:5,14:6,15:7,19:9,21:$V0,22:8,23:11,24:13,25:14,26:15,27:16,28:$V1,29:$V2,30:$V3,31:$V4,32:$V5,49:$V6,51:$V7},{1:[3]},{5:[1,24],6:25,8:$V8},o($V9,[2,3],{16:27,17:29,18:30,9:$Va,44:$Vb,45:$Vc,46:$Vd}),o($Ve,[2,8],{11:[1,34]}),o($Ve,[2,9],{11:[1,35]}),o($Vf,[2,11],{23:11,24:13,25:14,26:15,27:16,15:36,28:$V1,29:$V2,32:$V5,49:$V6,51:$V7}),o($Vf,[2,12],{24:13,25:14,26:15,27:16,23:37,28:$V1,29:$V2,32:$V5,49:$V6,51:$V7}),o($Vg,[2,21]),{12:39,21:[1,38],30:$V3,31:$V4},o($Vg,[2,23],{20:$Vh}),o($Vg,[2,25]),o($Vi,[2,20],{20:[1,41]}),o($Vg,[2,26]),o($Vg,[2,27]),o($Vg,[2,28]),o($Vg,[2,29]),o($Vj,[2,32]),o($Vj,[2,33]),{12:42,30:$V3,31:$V4},{12:43,30:$V3,31:$V4},{9:[1,45],12:12,19:47,21:$Vk,22:46,30:$V3,31:$V4,33:44},{4:49,7:3,10:4,12:12,13:5,14:6,15:7,19:9,21:$V0,22:8,23:11,24:13,25:14,26:15,27:16,28:$V1,29:$V2,30:$V3,31:$V4,32:$V5,49:$V6,51:$V7},{12:50,30:$V3,31:$V4},{1:[2,1]},{7:51,10:4,12:12,13:5,14:6,15:7,19:9,21:$V0,22:8,23:11,24:13,25:14,26:15,27:16,28:$V1,29:$V2,30:$V3,31:$V4,32:$V5,49:$V6,51:$V7},o($Vl,[2,4],{9:[1,52]}),{12:12,13:53,14:6,15:7,19:9,21:$V0,22:8,23:11,24:13,25:14,26:15,27:16,28:$V1,29:$V2,30:$V3,31:$V4,32:$V5,49:$V6,51:$V7},{12:12,13:54,14:6,15:7,19:9,21:$V0,22:8,23:11,24:13,25:14,26:15,27:16,28:$V1,29:$V2,30:$V3,31:$V4,32:$V5,44:[1,55],45:[1,56],46:[1,57],49:$V6,51:$V7},{12:12,13:58,14:6,15:7,19:9,21:$V0,22:8,23:11,24:13,25:14,26:15,27:16,28:$V1,29:$V2,30:$V3,31:$V4,32:$V5,49:$V6,51:$V7},{12:12,13:59,14:6,15:7,19:9,21:$V0,22:8,23:11,24:13,25:14,26:15,27:16,28:$V1,29:$V2,30:$V3,31:$V4,32:$V5,49:$V6,51:$V7},o($Vl,[2,57],{9:[1,60]}),o($Vl,[2,61],{9:[1,61]}),o($Vl,[2,65],{9:[1,62]}),{12:63,30:$V3,31:$V4},{12:64,30:$V3,31:$V4},o($Vf,[2,10],{24:13,25:14,26:15,27:16,23:37,28:$V1,29:$V2,32:$V5,49:$V6,51:$V7}),o($Vg,[2,24]),o($Vg,[2,22]),o($Vi,[2,19]),o($Vm,[2,18]),o($Vm,[2,17]),o($Vg,[2,30]),o($Vg,[2,31]),{34:[1,65],35:[1,66],37:[1,67],38:[1,68],39:[1,69],40:[1,70],41:[1,71],42:[1,72]},{12:12,19:47,21:$Vk,22:73,30:$V3,31:$V4},o($Vn,[2,45],{9:[1,74]}),{12:39,30:$V3,31:$V4},{20:$Vh},{6:25,8:$V8,50:[1,75]},o($Vg,[2,74],{52:[1,76],53:[1,77],54:[1,78]}),o($V9,[2,2],{16:27,17:29,18:30,9:$Va,44:$Vb,45:$Vc,46:$Vd}),o($Vl,[2,5]),o($Vf,[2,13]),o($Vf,[2,14]),o($Vl,[2,55],{9:[1,79]}),o($Vl,[2,59],{9:[1,80]}),o($Vl,[2,63],{9:[1,81]}),o($Vf,[2,15]),o($Vf,[2,16]),o($Vl,[2,56]),o($Vl,[2,60]),o($Vl,[2,64]),o($Ve,[2,6]),o($Ve,[2,7]),o($Vg,[2,34]),{9:$Vo,12:84,30:$V3,31:$V4,36:82,43:85,47:$Vp,48:$Vq},{9:$Vo,12:84,30:$V3,31:$V4,36:88,43:85,47:$Vp,48:$Vq},{9:$Vo,12:84,30:$V3,31:$V4,36:89,43:85,47:$Vp,48:$Vq},{9:$Vo,12:84,30:$V3,31:$V4,36:90,43:85,47:$Vp,48:$Vq},{9:$Vo,12:84,30:$V3,31:$V4,36:91,43:85,47:$Vp,48:$Vq},{9:$Vo,12:84,30:$V3,31:$V4,36:92,43:85,47:$Vp,48:$Vq},{9:$Vo,12:84,30:$V3,31:$V4,36:93,43:85,47:$Vp,48:$Vq},o($Vn,[2,43],{9:[1,94]}),o($Vn,[2,44]),o($Vg,[2,68]),o($Vg,[2,69]),o($Vg,[2,70]),{31:[1,102],46:[1,100],50:[1,97],55:95,56:96,57:[1,99],58:[1,101],59:98},o($Vl,[2,54]),o($Vl,[2,58]),o($Vl,[2,62]),{34:[1,103]},{12:104,30:$V3,31:$V4,43:105,47:$Vp,48:$Vq},{9:[1,106],34:[2,49]},{9:[1,107],34:[2,53]},o($Vr,[2,66]),o($Vr,[2,67]),{34:[1,108]},{34:[1,109]},{34:[1,110]},{34:[1,111]},{34:[1,112]},{34:[1,113]},o($Vn,[2,42]),{50:[1,114]},{31:[1,116],50:[1,115]},o($Vg,[2,73]),{46:[1,117],50:[2,84],58:[1,118]},o($Vs,[2,75]),{31:[1,120],57:[1,119]},{31:[1,122],57:[1,121]},o($Vt,[2,78]),o($Vg,[2,35]),{9:[1,123],34:[2,47]},{9:[1,124],34:[2,51]},{34:[2,48]},{34:[2,52]},o($Vg,[2,36]),o($Vg,[2,37]),o($Vg,[2,38]),o($Vg,[2,39]),o($Vg,[2,40]),o($Vg,[2,41]),o($Vg,[2,71]),o($Vg,[2,72]),o($Vt,[2,81]),{57:[1,125]},{57:[1,126]},o($Vs,[2,76]),o($Vt,[2,79]),o($Vs,[2,77]),o($Vt,[2,80]),{34:[2,46]},{34:[2,50]},{50:[2,82]},{50:[2,83]}],
defaultActions: {24:[2,1],106:[2,48],107:[2,52],123:[2,46],124:[2,50],125:[2,82],126:[2,83]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 31;
break;
case 1:return 30;
break;
case 2:return 39;
break;
case 3:return 37;
break;
case 4:return 40;
break;
case 5:return 38;
break;
case 6:return 41;
break;
case 7:return 42;
break;
case 8:return 47;
break;
case 9:return 48;
break;
case 10:return 57;
break;
case 11:return 52;
break;
case 12:return 53;
break;
case 13:return 29;
break;
case 14:return 8;
break;
case 15:return 28;
break;
case 16:return 32;
break;
case 17:return 34;
break;
case 18:return 35;
break;
case 19:return 49;
break;
case 20:return 11;
break;
case 21:return 51;
break;
case 22:return 54;
break;
case 23:return 50;
break;
case 24:return 44;
break;
case 25:return "'";
break;
case 26:return 21;
break;
case 27:return 45;
break;
case 28:return 46;
break;
case 29:return 58;
break;
case 30:return 20;
break;
case 31:return 9;
break;
case 32:return 5;
break;
}
},
rules: [/^(?:n\b)/i,/^(?:[_a-zA-Z][_a-zA-Z0-9-]*)/i,/^(?:~=)/i,/^(?:\*=)/i,/^(?:\|=)/i,/^(?:!=)/i,/^(?:\^=)/i,/^(?:\$=)/i,/^(?:"[^\n\r\f\\"]*")/i,/^(?:'[^\n\r\f\\']*')/i,/^(?:\d+)/i,/^(?:\(odd\))/i,/^(?:\(even\))/i,/^(?:#)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:=)/i,/^(?::not\()/i,/^(?:::)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:>)/i,/^(?:')/i,/^(?:\*)/i,/^(?:~)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\|)/i,/^(?:\s+)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = cssParser;
exports.Parser = cssParser.Parser;
exports.parse = function () { return cssParser.parse.apply(cssParser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}